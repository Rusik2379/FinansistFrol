import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
import sqlite3
from datetime import datetime
from calendar import month_name
import os
from pathlib import Path
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
BASE_DIR = Path(__file__).parent
DB_PATH = os.path.join(BASE_DIR, 'finance.db')

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
(
    MAIN_MENU,
    INCOME_AMOUNT, INCOME_CATEGORY, INCOME_CUSTOM_CATEGORY,
    EXPENSE_AMOUNT, EXPENSE_CATEGORY, EXPENSE_CUSTOM_CATEGORY,
    DEBT_AMOUNT, DEBT_PERSON, DEBT_TO_USER, DEBT_DESCRIPTION,
    STATS_MENU, STATS_TYPE, STATS_MONTH,
    SELECT_MONTH,
    DELETE_MENU, DELETE_INCOME, DELETE_EXPENSE, DELETE_DEBT,
    PROFILE_MENU
) = range(20)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
INCOME_CATEGORIES = ['–ó–∞—Ä–ø–ª–∞—Ç–∞', '–ü–æ–¥–∞—Ä–æ–∫', '–ü–µ—Ä–µ–≤–æ–¥', '–î—Ä—É–≥–æ–µ']
EXPENSE_CATEGORIES = ['–ñ–∏–ª—å–µ', '–ï–¥–∞', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ó–¥–æ—Ä–æ–≤—å–µ', '–î—Ä—É–≥–æ–µ']
RUSSIAN_MONTHS = [
    '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
    '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
]
CURRENT_YEAR = datetime.now().year
RECORDS_PER_PAGE = 5

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT UNIQUE,
        first_name TEXT,
        last_name TEXT,
        registration_date TEXT,
        last_activity TEXT
    )''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS incomes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        username TEXT,
        amount REAL,
        category TEXT,
        date TEXT,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS expenses (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        username TEXT,
        amount REAL,
        category TEXT,
        date TEXT,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS debts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        from_user_id INTEGER,
        from_username TEXT,
        to_user_id INTEGER,
        to_username TEXT,
        amount REAL,
        description TEXT,
        date TEXT,
        is_paid INTEGER DEFAULT 0,
        FOREIGN KEY (from_user_id) REFERENCES users (user_id),
        FOREIGN KEY (to_user_id) REFERENCES users (user_id)
    )''')
    
    conn.commit()
    conn.close()

init_db()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [['–î–æ—Ö–æ–¥—ã', '–†–∞—Å—Ö–æ–¥—ã'], ['–î–æ–ª–≥–∏', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'], 
         ['–§–∏–Ω–∞–Ω—Å—ã', '–£–¥–∞–ª–∏—Ç—å'], ['–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å']],
        resize_keyboard=True
    )

def stats_menu_keyboard():
    return ReplyKeyboardMarkup(
        [['–î–æ—Ö–æ–¥—ã', '–†–∞—Å—Ö–æ–¥—ã'], ['–î–æ–ª–≥–∏', '–ù–∞–∑–∞–¥']],
        resize_keyboard=True
    )

def months_keyboard():
    keyboard = [RUSSIAN_MONTHS[i:i+3] for i in range(0, len(RUSSIAN_MONTHS), 3)]
    keyboard.append(['–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è', '–ù–∞–∑–∞–¥'])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def back_keyboard():
    return ReplyKeyboardMarkup([['–ù–∞–∑–∞–¥']], resize_keyboard=True)

def delete_menu_keyboard():
    return ReplyKeyboardMarkup(
        [['–î–æ—Ö–æ–¥—ã', '–†–∞—Å—Ö–æ–¥—ã'], ['–î–æ–ª–≥–∏', '–ù–∞–∑–∞–¥']],
        resize_keyboard=True
    )

def profile_menu_keyboard():
    return ReplyKeyboardMarkup(
        [['–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ', '–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'], ['–ù–∞–∑–∞–¥']],
        resize_keyboard=True
    )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def register_user(user):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    username = f"@{user.username.lower()}" if user.username else None
    now = datetime.now().isoformat()
    
    cursor.execute(
        '''INSERT OR IGNORE INTO users 
        (user_id, username, first_name, last_name, registration_date, last_activity) 
        VALUES (?, ?, ?, ?, ?, ?)''',
        (user.id, username, user.first_name, user.last_name, now, now)
    )
    
    cursor.execute(
        '''UPDATE users SET 
        username = ?,
        first_name = ?,
        last_name = ?,
        last_activity = ?
        WHERE user_id = ?''',
        (username, user.first_name, user.last_name, now, user.id)
    )
    
    conn.commit()
    conn.close()
    return username

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    username = await register_user(user)
    
    welcome_msg = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        f"–¢–≤–æ–π —é–∑–µ—Ä–Ω–µ–π–º: {username or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n"
        "–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–±—è —á–µ—Ä–µ–∑ @—é–∑–µ—Ä–Ω–µ–π–º\n\n"
        "–ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º:\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram\n"
        "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'\n"
        "3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'"
    )
    
    await update.message.reply_text(
        welcome_msg,
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU

# –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def profile_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        '–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è:',
        reply_markup=profile_menu_keyboard()
    )
    return PROFILE_MENU

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute(
        '''SELECT username, first_name, last_name, registration_date 
        FROM users WHERE user_id = ?''',
        (user.id,)
    )
    profile = cursor.fetchone()
    
    if not profile:
        conn.close()
        await update.message.reply_text(
            '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start',
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU
    
    username, first_name, last_name, reg_date = profile
    reg_date = datetime.fromisoformat(reg_date).strftime('%d.%m.%Y %H:%M')
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    cursor.execute(
        '''SELECT SUM(amount) FROM incomes WHERE user_id = ?''',
        (user.id,)
    )
    total_income = cursor.fetchone()[0] or 0
    
    cursor.execute(
        '''SELECT SUM(amount) FROM expenses WHERE user_id = ?''',
        (user.id,)
    )
    total_expense = cursor.fetchone()[0] or 0
    
    cursor.execute(
        '''SELECT SUM(amount) FROM debts WHERE from_user_id = ? AND is_paid = 0''',
        (user.id,)
    )
    total_debts = cursor.fetchone()[0] or 0
    
    conn.close()
    
    profile_msg = (
        f"üìå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"üë§ –ò–º—è: {first_name} {last_name or ''}\n"
        f"üìõ –Æ–∑–µ—Ä–Ω–µ–π–º: {username or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        f"üÜî ID: {user.id}\n"
        f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {reg_date}\n\n"
        f"üí∞ –û–±—â–∏–µ –¥–æ—Ö–æ–¥—ã: {total_income:.2f} —Ä—É–±.\n"
        f"üí∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_expense:.2f} —Ä—É–±.\n"
        f"üßæ –¢–µ–∫—É—â–∏–µ –¥–æ–ª–≥–∏: {total_debts:.2f} —Ä—É–±.\n\n"
        f"–ß—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –≤–∞—Å, "
        f"—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram"
    )
    
    await update.message.reply_text(
        profile_msg,
        reply_markup=profile_menu_keyboard()
    )
    return PROFILE_MENU

async def find_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    args = context.args
    
    if not args:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /find @username",
            reply_markup=main_menu_keyboard()
        )
        return
    
    username = args[0].lower()
    if not username.startswith('@'):
        username = f"@{username}"
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(
        '''SELECT user_id, first_name, last_name, registration_date 
        FROM users WHERE username = ?''',
        (username,)
    )
    found_user = cursor.fetchone()
    
    if not found_user:
        conn.close()
        await update.message.reply_text(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ",
            reply_markup=main_menu_keyboard()
        )
        return
    
    user_id, first_name, last_name, reg_date = found_user
    reg_date = datetime.fromisoformat(reg_date).strftime('%d.%m.%Y')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–æ–ª–≥–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    cursor.execute(
        '''SELECT SUM(amount) FROM debts 
        WHERE from_user_id = ? AND to_user_id = ? AND is_paid = 0''',
        (user.id, user_id)
    )
    debts_to_user = cursor.fetchone()[0] or 0
    
    cursor.execute(
        '''SELECT SUM(amount) FROM debts 
        WHERE from_user_id = ? AND to_user_id = ? AND is_paid = 0''',
        (user_id, user.id)
    )
    debts_from_user = cursor.fetchone()[0] or 0
    
    conn.close()
    
    response_msg = (
        f"üîç –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
        f"üë§ –ò–º—è: {first_name} {last_name or ''}\n"
        f"üìõ –Æ–∑–µ—Ä–Ω–µ–π–º: {username}\n"
        f"üÜî ID: {user_id}\n"
        f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {reg_date}\n\n"
    )
    
    if debts_to_user > 0:
        response_msg += f"‚Üí –í—ã –¥–æ–ª–∂–Ω—ã –µ–º—É: {debts_to_user:.2f} —Ä—É–±.\n"
    if debts_from_user > 0:
        response_msg += f"‚Üê –û–Ω –¥–æ–ª–∂–µ–Ω –≤–∞–º: {debts_from_user:.2f} —Ä—É–±."
    
    if debts_to_user == 0 and debts_from_user == 0:
        response_msg += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤ –º–µ–∂–¥—É –≤–∞–º–∏"
    
    await update.message.reply_text(
        response_msg,
        reply_markup=main_menu_keyboard()
    )

# –î–æ—Ö–æ–¥—ã
async def income_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:',
        reply_markup=ReplyKeyboardRemove()
    )
    return INCOME_AMOUNT

async def income_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        amount = float(update.message.text.replace(',', '.'))
        if amount <= 0:
            await update.message.reply_text('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!')
            return INCOME_AMOUNT
            
        context.user_data['income_amount'] = amount
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
            reply_markup=ReplyKeyboardMarkup(
                [INCOME_CATEGORIES[i:i+2] for i in range(0, len(INCOME_CATEGORIES), 2)],
                resize_keyboard=True
            )
        )
        return INCOME_CATEGORY
    except ValueError:
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1500.50)')
        return INCOME_AMOUNT

async def income_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    category = update.message.text
    if category not in INCOME_CATEGORIES:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.')
        return INCOME_CATEGORY
    
    if category == '–î—Ä—É–≥–æ–µ':
        await update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:',
            reply_markup=ReplyKeyboardRemove()
        )
        return INCOME_CUSTOM_CATEGORY
    
    await save_income(update, context, category)
    return MAIN_MENU

async def income_custom_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    category = update.message.text
    await save_income(update, context, category)
    return MAIN_MENU

async def save_income(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str):
    amount = context.user_data['income_amount']
    user = update.message.from_user
    username = f"@{user.username.lower()}" if user.username else None
    current_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(
        '''INSERT INTO incomes 
        (user_id, username, amount, category, date) 
        VALUES (?, ?, ?, ?, ?)''',
        (user.id, username, amount, category, current_date)
    )
    conn.commit()
    conn.close()
    
    await update.message.reply_text(
        f'‚úÖ –î–æ—Ö–æ–¥ {amount:.2f} —Ä—É–±. ({category}) –æ—Ç {current_date[:10]} –¥–æ–±–∞–≤–ª–µ–Ω!',
        reply_markup=main_menu_keyboard()
    )

# –†–∞—Å—Ö–æ–¥—ã
async def expense_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:',
        reply_markup=ReplyKeyboardRemove()
    )
    return EXPENSE_AMOUNT

async def expense_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        amount = float(update.message.text.replace(',', '.'))
        if amount <= 0:
            await update.message.reply_text('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!')
            return EXPENSE_AMOUNT
            
        context.user_data['expense_amount'] = amount
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—É:',
            reply_markup=ReplyKeyboardMarkup(
                [EXPENSE_CATEGORIES[i:i+2] for i in range(0, len(EXPENSE_CATEGORIES), 2)],
                resize_keyboard=True
            )
        )
        return EXPENSE_CATEGORY
    except ValueError:
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1500.50)')
        return EXPENSE_AMOUNT

async def expense_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    category = update.message.text
    if category not in EXPENSE_CATEGORIES:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.')
        return EXPENSE_CATEGORY
    
    if category == '–î—Ä—É–≥–æ–µ':
        await update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:',
            reply_markup=ReplyKeyboardRemove()
        )
        return EXPENSE_CUSTOM_CATEGORY
    
    await save_expense(update, context, category)
    return MAIN_MENU

async def expense_custom_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    category = update.message.text
    await save_expense(update, context, category)
    return MAIN_MENU

async def save_expense(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str):
    amount = context.user_data['expense_amount']
    user = update.message.from_user
    username = f"@{user.username.lower()}" if user.username else None
    current_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(
        '''INSERT INTO expenses 
        (user_id, username, amount, category, date) 
        VALUES (?, ?, ?, ?, ?)''',
        (user.id, username, amount, category, current_date)
    )
    conn.commit()
    conn.close()
    
    await update.message.reply_text(
        f'‚úÖ –†–∞—Å—Ö–æ–¥ {amount:.2f} —Ä—É–±. ({category}) –æ—Ç {current_date[:10]} –¥–æ–±–∞–≤–ª–µ–Ω!',
        reply_markup=main_menu_keyboard()
    )

# –î–æ–ª–≥–∏
async def debt_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ª–≥–∞:',
        reply_markup=ReplyKeyboardRemove()
    )
    return DEBT_AMOUNT

async def debt_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        amount = float(update.message.text.replace(',', '.'))
        if amount <= 0:
            await update.message.reply_text('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!')
            return DEBT_AMOUNT
            
        context.user_data['debt_amount'] = amount
        await update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–æ–ª–∂–Ω–∏–∫–∞ –∏–ª–∏ –µ–≥–æ @—é–∑–µ—Ä–Ω–µ–π–º:',
            reply_markup=back_keyboard()
        )
        return DEBT_PERSON
    except ValueError:
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1500.50)')
        return DEBT_AMOUNT

async def debt_person(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    person = update.message.text
    
    if person.startswith('@'):
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute(
            "SELECT user_id, first_name FROM users WHERE username = ?",
            (person.lower(),)
        )
        user = cursor.fetchone()
        conn.close()
        
        if user:
            context.user_data['debt_to_user_id'] = user[0]
            context.user_data['debt_to_username'] = person.lower()
            context.user_data['debt_to_name'] = user[1]
            await update.message.reply_text(
                f"–î–æ–ª–≥ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user[1]} ({person})\n"
                "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–≥–∞:",
                reply_markup=back_keyboard()
            )
            return DEBT_DESCRIPTION
    
    context.user_data['debt_person'] = person
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–≥–∞:",
        reply_markup=back_keyboard()
    )
    return DEBT_DESCRIPTION

async def save_debt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    description = update.message.text
    amount = context.user_data['debt_amount']
    user = update.message.from_user
    username = f"@{user.username.lower()}" if user.username else None
    current_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    if 'debt_to_user_id' in context.user_data:
        cursor.execute(
            '''INSERT INTO debts 
            (from_user_id, from_username, to_user_id, to_username, 
             amount, description, date) 
            VALUES (?, ?, ?, ?, ?, ?, ?)''',
            (user.id, username, 
             context.user_data['debt_to_user_id'], context.user_data['debt_to_username'],
             amount, description, current_date)
        )
        person_info = context.user_data['debt_to_name']
    else:
        cursor.execute(
            '''INSERT INTO debts 
            (from_user_id, from_username, to_username, amount, description, date) 
            VALUES (?, ?, ?, ?, ?, ?)''',
            (user.id, username, context.user_data['debt_person'], 
             amount, description, current_date)
        )
        person_info = context.user_data['debt_person']
    
    conn.commit()
    conn.close()
    
    await update.message.reply_text(
        f'‚úÖ –î–æ–ª–≥ {amount:.2f} —Ä—É–±. ({description})\n'
        f'–î–ª—è: {person_info}\n'
        f'–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!',
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def stats_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:',
        reply_markup=stats_menu_keyboard()
    )
    return STATS_MENU

async def stats_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    stats_type = update.message.text
    if stats_type not in ['–î–æ—Ö–æ–¥—ã', '–†–∞—Å—Ö–æ–¥—ã', '–î–æ–ª–≥–∏']:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.')
        return STATS_MENU
    
    context.user_data['stats_type'] = stats_type
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:',
        reply_markup=months_keyboard()
    )
    return STATS_MONTH

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    selected_month = update.message.text
    if selected_month == '–ù–∞–∑–∞–¥':
        return await stats_menu(update, context)
    
    stats_type = context.user_data['stats_type']
    user = update.message.from_user
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    if selected_month == '–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è':
        if stats_type == '–î–æ—Ö–æ–¥—ã':
            cursor.execute(
                '''SELECT amount, category, date FROM incomes 
                WHERE user_id = ? ORDER BY date DESC''',
                (user.id,)
            )
        elif stats_type == '–†–∞—Å—Ö–æ–¥—ã':
            cursor.execute(
                '''SELECT amount, category, date FROM expenses 
                WHERE user_id = ? ORDER BY date DESC''',
                (user.id,)
            )
        else:
            cursor.execute(
                '''SELECT amount, to_username, description, date 
                FROM debts WHERE from_user_id = ? ORDER BY date DESC''',
                (user.id,)
            )
        period = "–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"
    else:
        month_num = RUSSIAN_MONTHS.index(selected_month) + 1
        start_date = f"{CURRENT_YEAR}-{month_num:02d}-01"
        end_date = f"{CURRENT_YEAR}-{month_num+1:02d}-01" if month_num < 12 else f"{CURRENT_YEAR}-12-31"
        
        if stats_type == '–î–æ—Ö–æ–¥—ã':
            cursor.execute(
                '''SELECT amount, category, date FROM incomes 
                WHERE user_id = ? AND date >= ? AND date < ? 
                ORDER BY date DESC''',
                (user.id, start_date, end_date)
            )
        elif stats_type == '–†–∞—Å—Ö–æ–¥—ã':
            cursor.execute(
                '''SELECT amount, category, date FROM expenses 
                WHERE user_id = ? AND date >= ? AND date < ? 
                ORDER BY date DESC''',
                (user.id, start_date, end_date)
            )
        else:
            cursor.execute(
                '''SELECT amount, to_username, description, date 
                FROM debts WHERE from_user_id = ? 
                AND date >= ? AND date < ? 
                ORDER BY date DESC''',
                (user.id, start_date, end_date)
            )
        period = f"–∑–∞ {selected_month.lower()} {CURRENT_YEAR}"
    
    records = cursor.fetchall()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É
    if selected_month == '–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è':
        if stats_type == '–î–æ—Ö–æ–¥—ã':
            cursor.execute(
                "SELECT SUM(amount) FROM incomes WHERE user_id = ?",
                (user.id,)
            )
        elif stats_type == '–†–∞—Å—Ö–æ–¥—ã':
            cursor.execute(
                "SELECT SUM(amount) FROM expenses WHERE user_id = ?",
                (user.id,)
            )
        else:
            cursor.execute(
                "SELECT SUM(amount) FROM debts WHERE from_user_id = ?",
                (user.id,)
            )
    else:
        if stats_type == '–î–æ—Ö–æ–¥—ã':
            cursor.execute(
                '''SELECT SUM(amount) FROM incomes 
                WHERE user_id = ? AND date >= ? AND date < ?''',
                (user.id, start_date, end_date)
            )
        elif stats_type == '–†–∞—Å—Ö–æ–¥—ã':
            cursor.execute(
                '''SELECT SUM(amount) FROM expenses 
                WHERE user_id = ? AND date >= ? AND date < ?''',
                (user.id, start_date, end_date)
            )
        else:
            cursor.execute(
                '''SELECT SUM(amount) FROM debts 
                WHERE from_user_id = ? AND date >= ? AND date < ?''',
                (user.id, start_date, end_date)
            )
    
    total = cursor.fetchone()[0] or 0
    conn.close()
    
    if not records:
        await update.message.reply_text(
            f'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö {stats_type.lower()} {period}.',
            reply_markup=stats_menu_keyboard()
        )
        return STATS_MENU
        
    message = f"üìä {stats_type} {period}:\n\n"
    
    if stats_type == '–î–æ—Ö–æ–¥—ã':
        for amount, category, date in records:
            date_str = datetime.strptime(date, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
            message += f"‚Ä¢ {amount:.2f} —Ä—É–±. ({category}) - {date_str}\n"
    elif stats_type == '–†–∞—Å—Ö–æ–¥—ã':
        for amount, category, date in records:
            date_str = datetime.strptime(date, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
            message += f"‚Ä¢ {amount:.2f} —Ä—É–±. ({category}) - {date_str}\n"
    else:
        for amount, to_user, description, date in records:
            date_str = datetime.strptime(date, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
            message += f"‚Ä¢ {amount:.2f} —Ä—É–±. –¥–ª—è {to_user or description} - {date_str}\n"
    
    message += f"\nüí∞ –ò—Ç–æ–≥–æ: {total:.2f} —Ä—É–±."
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    max_length = 4000
    if len(message) > max_length:
        parts = [message[i:i+max_length] for i in range(0, len(message), max_length)]
        for part in parts[:-1]:
            await update.message.reply_text(part)
        await update.message.reply_text(
            parts[-1],
            reply_markup=stats_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            message,
            reply_markup=stats_menu_keyboard()
        )
    
    return STATS_MENU

# –§–∏–Ω–∞–Ω—Å—ã (–∫—Ä–∞—Ç–∫–∏–µ –∏—Ç–æ–≥–∏)
async def show_finances_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:',
        reply_markup=months_keyboard()
    )
    return SELECT_MONTH

async def show_finances(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    selected_month = update.message.text
    user = update.message.from_user
    
    if selected_month == '–ù–∞–∑–∞–¥':
        await update.message.reply_text(
            '–û—Ç–º–µ–Ω–µ–Ω–æ.',
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    if selected_month == '–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è':
        income_query = "SELECT SUM(amount) FROM incomes WHERE user_id = ?"
        expense_query = "SELECT SUM(amount) FROM expenses WHERE user_id = ?"
        debt_query = "SELECT SUM(amount) FROM debts WHERE from_user_id = ? AND is_paid = 0"
        params = (user.id,)
        period = "–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"
    else:
        month_num = RUSSIAN_MONTHS.index(selected_month) + 1
        start_date = f"{CURRENT_YEAR}-{month_num:02d}-01"
        end_date = f"{CURRENT_YEAR}-{month_num+1:02d}-01" if month_num < 12 else f"{CURRENT_YEAR}-12-31"
        
        income_query = """
            SELECT SUM(amount) FROM incomes 
            WHERE user_id = ? AND date >= ? AND date < ?
        """
        expense_query = """
            SELECT SUM(amount) FROM expenses 
            WHERE user_id = ? AND date >= ? AND date < ?
        """
        debt_query = """
            SELECT SUM(amount) FROM debts 
            WHERE from_user_id = ? AND is_paid = 0 AND date >= ? AND date < ?
        """
        params = (user.id, start_date, end_date)
        period = f"–∑–∞ {selected_month.lower()} {CURRENT_YEAR}"
    
    cursor.execute(income_query, params)
    total_income = cursor.fetchone()[0] or 0
    
    cursor.execute(expense_query, params)
    total_expense = cursor.fetchone()[0] or 0
    
    cursor.execute(debt_query, params)
    total_debts = cursor.fetchone()[0] or 0
    
    conn.close()
    
    await update.message.reply_text(
        f'üìä <b>–§–∏–Ω–∞–Ω—Å—ã {period}</b>\n\n'
        f'üí∞ –î–æ—Ö–æ–¥—ã: {total_income:.2f} —Ä—É–±.\n'
        f'üí∏ –†–∞—Å—Ö–æ–¥—ã: {total_expense:.2f} —Ä—É–±.\n'
        f'üìâ –ë–∞–ª–∞–Ω—Å: {total_income - total_expense:.2f} —Ä—É–±.\n'
        f'üßæ –î–æ–ª–≥–∏: {total_debts:.2f} —Ä—É–±.',
        parse_mode='HTML',
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
async def delete_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?',
        reply_markup=delete_menu_keyboard()
    )
    return DELETE_MENU

async def delete_incomes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute(
        '''SELECT id, amount, category, date FROM incomes 
        WHERE user_id = ? ORDER BY date DESC LIMIT ?''',
        (user.id, RECORDS_PER_PAGE)
    )
    incomes = cursor.fetchall()
    conn.close()
    
    if not incomes:
        await update.message.reply_text(
            '–ù–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.',
            reply_markup=delete_menu_keyboard()
        )
        return DELETE_MENU
    
    keyboard = []
    for income in incomes:
        id, amount, category, date = income
        date_str = datetime.strptime(date, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
        text = f"{amount} —Ä—É–±. ({category}) {date_str}"
        keyboard.append([f"–£–¥–∞–ª–∏—Ç—å –¥–æ—Ö–æ–¥ #{id}: {text}"])
    
    keyboard.append(['–ù–∞–∑–∞–¥'])
    
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Ö–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return DELETE_INCOME

async def delete_income_record(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == '–ù–∞–∑–∞–¥':
        return await delete_menu(update, context)
    
    try:
        income_id = int(text.split('#')[1].split(':')[0])
    except (IndexError, ValueError):
        await update.message.reply_text(
            '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            reply_markup=back_keyboard()
        )
        return DELETE_INCOME
    
    user = update.message.from_user
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute(
        'DELETE FROM incomes WHERE id = ? AND user_id = ?',
        (income_id, user.id)
    )
    deleted = cursor.rowcount
    conn.commit()
    conn.close()
    
    if deleted > 0:
        await update.message.reply_text(
            '–î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!',
            reply_markup=delete_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–æ—Ö–æ–¥. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.',
            reply_markup=delete_menu_keyboard()
        )
    
    return DELETE_MENU

async def delete_expenses(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute(
        '''SELECT id, amount, category, date FROM expenses 
        WHERE user_id = ? ORDER BY date DESC LIMIT ?''',
        (user.id, RECORDS_PER_PAGE)
    )
    expenses = cursor.fetchall()
    conn.close()
    
    if not expenses:
        await update.message.reply_text(
            '–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.',
            reply_markup=delete_menu_keyboard()
        )
        return DELETE_MENU
    
    keyboard = []
    for expense in expenses:
        id, amount, category, date = expense
        date_str = datetime.strptime(date, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
        text = f"{amount} —Ä—É–±. ({category}) {date_str}"
        keyboard.append([f"–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ #{id}: {text}"])
    
    keyboard.append(['–ù–∞–∑–∞–¥'])
    
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return DELETE_EXPENSE

async def delete_expense_record(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == '–ù–∞–∑–∞–¥':
        return await delete_menu(update, context)
    
    try:
        expense_id = int(text.split('#')[1].split(':')[0])
    except (IndexError, ValueError):
        await update.message.reply_text(
            '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            reply_markup=back_keyboard()
        )
        return DELETE_EXPENSE
    
    user = update.message.from_user
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute(
        'DELETE FROM expenses WHERE id = ? AND user_id = ?',
        (expense_id, user.id)
    )
    deleted = cursor.rowcount
    conn.commit()
    conn.close()
    
    if deleted > 0:
        await update.message.reply_text(
            '–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!',
            reply_markup=delete_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.',
            reply_markup=delete_menu_keyboard()
        )
    
    return DELETE_MENU

async def delete_debts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute(
        '''SELECT id, amount, to_username, description, date FROM debts 
        WHERE from_user_id = ? ORDER BY date DESC LIMIT ?''',
        (user.id, RECORDS_PER_PAGE)
    )
    debts = cursor.fetchall()
    conn.close()
    
    if not debts:
        await update.message.reply_text(
            '–ù–µ—Ç –¥–æ–ª–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.',
            reply_markup=delete_menu_keyboard()
        )
        return DELETE_MENU
    
    keyboard = []
    for debt in debts:
        id, amount, to_user, description, date = debt
        date_str = datetime.strptime(date, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
        text = f"{amount} —Ä—É–±. ({to_user or description}) {date_str}"
        keyboard.append([f"–£–¥–∞–ª–∏—Ç—å –¥–æ–ª–≥ #{id}: {text}"])
    
    keyboard.append(['–ù–∞–∑–∞–¥'])
    
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return DELETE_DEBT

async def delete_debt_record(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == '–ù–∞–∑–∞–¥':
        return await delete_menu(update, context)
    
    try:
        debt_id = int(text.split('#')[1].split(':')[0])
    except (IndexError, ValueError):
        await update.message.reply_text(
            '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            reply_markup=back_keyboard()
        )
        return DELETE_DEBT
    
    user = update.message.from_user
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute(
        'DELETE FROM debts WHERE id = ? AND from_user_id = ?',
        (debt_id, user.id)
    )
    deleted = cursor.rowcount
    conn.commit()
    conn.close()
    
    if deleted > 0:
        await update.message.reply_text(
            '–î–æ–ª–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!',
            reply_markup=delete_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–æ–ª–≥. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.',
            reply_markup=delete_menu_keyboard()
        )
    
    return DELETE_MENU

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main() -> None:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env
    load_dotenv()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('BOT_TOKEN')
    if token is None:
        raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    application = Application.builder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.Regex('^–î–æ—Ö–æ–¥—ã$'), income_start),
                MessageHandler(filters.Regex('^–†–∞—Å—Ö–æ–¥—ã$'), expense_start),
                MessageHandler(filters.Regex('^–î–æ–ª–≥–∏$'), debt_start),
                MessageHandler(filters.Regex('^–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$'), stats_menu),
                MessageHandler(filters.Regex('^–§–∏–Ω–∞–Ω—Å—ã$'), show_finances_start),
                MessageHandler(filters.Regex('^–£–¥–∞–ª–∏—Ç—å$'), delete_menu),
                MessageHandler(filters.Regex('^–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å$'), profile_menu),
            ],
            PROFILE_MENU: [
                MessageHandler(filters.Regex('^–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ$'), show_profile),
                MessageHandler(filters.Regex('^–ù–∞–∑–∞–¥$'), cancel),
            ],
            INCOME_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, income_amount)],
            INCOME_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, income_category)],
            INCOME_CUSTOM_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, income_custom_category)],
            EXPENSE_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, expense_amount)],
            EXPENSE_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, expense_category)],
            EXPENSE_CUSTOM_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, expense_custom_category)],
            DEBT_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, debt_amount)],
            DEBT_PERSON: [MessageHandler(filters.TEXT & ~filters.COMMAND, debt_person)],
            DEBT_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_debt)],
            STATS_MENU: [
                MessageHandler(filters.Regex('^–î–æ—Ö–æ–¥—ã$'), stats_type),
                MessageHandler(filters.Regex('^–†–∞—Å—Ö–æ–¥—ã$'), stats_type),
                MessageHandler(filters.Regex('^–î–æ–ª–≥–∏$'), stats_type),
                MessageHandler(filters.Regex('^–ù–∞–∑–∞–¥$'), cancel),
            ],
            STATS_MONTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, show_stats)],
            SELECT_MONTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, show_finances)],
            DELETE_MENU: [
                MessageHandler(filters.Regex('^–î–æ—Ö–æ–¥—ã$'), delete_incomes),
                MessageHandler(filters.Regex('^–†–∞—Å—Ö–æ–¥—ã$'), delete_expenses),
                MessageHandler(filters.Regex('^–î–æ–ª–≥–∏$'), delete_debts),
                MessageHandler(filters.Regex('^–ù–∞–∑–∞–¥$'), cancel),
            ],
            DELETE_INCOME: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_income_record)],
            DELETE_EXPENSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_expense_record)],
            DELETE_DEBT: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_debt_record)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("find", find_user))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True,  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–∫–∞ –±–æ—Ç –±—ã–ª offline
        close_loop=False
    )

if __name__ == '__main__':
    main()